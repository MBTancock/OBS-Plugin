
package com.avid.central.obsplugin.inewslibrary.inewsqueue;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.CreateStoryResponseType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.CreateStoryType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.GetAttributesResponseType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.GetAttributesType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.GetStoriesResponseType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.GetStoriesType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.GetStoryResponseType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.GetStoryType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.HasNextResponseType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.HasNextType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.HasPreviousResponseType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.HasPreviousType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.SetCurrentQueueResponseType;
import com.avid.central.obsplugin.inewslibrary.inewsqueue.types.SetCurrentQueueType;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "INEWSQueuePortType", targetNamespace = "http://avid.com/inewsqueue")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    com.avid.central.obsplugin.inewslibrary.inewsqueue.types.ObjectFactory.class,
    com.avid.central.obsplugin.inewslibrary.inewsstory.types.ObjectFactory.class,
    com.avid.central.obsplugin.inewslibrary.inewssystem.types.ObjectFactory.class
})
public interface INEWSQueuePortType {


    /**
     * 
     *       This request sets the current Queue for the HTTP session.  Subsequent requests through the iNEWSQueue service will
     *       be performed against this Queue.  The current Queue can be changed by calling this requests again.
     *       
     *       If a connection was not previously established, or the connection to the iNEWS server has been lost a 
     *       ConnectionFault will be returned.  If an error occurs during the setting of the Queue then a SetCurrentQueueFault 
     *       will be returned.
     *       
     * 
     * @param body
     * @return
     *     returns com.avid.inewsqueue.types.SetCurrentQueueResponseType
     * @throws ConnectionFault
     * @throws SetCurrentQueueFault
     */
    @WebMethod(operationName = "SetCurrentQueue")
    @WebResult(name = "SetCurrentQueueResponse", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
    public SetCurrentQueueResponseType setCurrentQueue(
        @WebParam(name = "SetCurrentQueue", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
        SetCurrentQueueType body)
        throws ConnectionFault, SetCurrentQueueFault
    ;

    /**
     * 
     *         This request retrieves stories from the current queue (see SetCurrentQueue). It behaves like a cursor against 
     *         the current Queue.  This means that each GetStories request moves the position of the cursor in the Queue.  To 
     *         facilitate this, one of the parameters to this request is the direction that you wish to navigate (NEXT, PREV 
     *         or SAME).  You can also specify if you wish to receive the story bodies in the response and the number of 
     *         stories that you wish returned.  If the number requested exceeds the number available .  All of the stories are 
     *         returned in CDATA block that contain the NSML for the story.  NSML parsing is the responsibility of the caller.  
     *         
     *         If a connection was not previously established, or the connection to the iNEWS server has been lost a 
     *         ConnectionFault will be returned.  If an error occurs during the story retrieval or the current queue has not 
     *         been set by calling SetCurrentQueue then a GetStoriesFault will be returned.
     *       
     * 
     * @param body
     * @return
     *     returns com.avid.inewsqueue.types.GetStoriesResponseType
     * @throws GetStoriesFault
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "GetStories")
    @WebResult(name = "GetStoriesResponse", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
    public GetStoriesResponseType getStories(
        @WebParam(name = "GetStories", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
        GetStoriesType body)
        throws ConnectionFault, GetStoriesFault
    ;

    /**
     * 
     *         This request is used to determine if the GetStories request with a NEXT navigation direction request would return 
     *         stories that have not already been retrieved or not.  
     *         
     *         If a connection was not previously established, or the connection to the iNEWS server has been lost a 
     *         ConnectionFault will be returned.  If an error occurs during the request or the current queue 
     *         has not been set by calling SetCurrentQueue then a HasNextFault will be returned.
     *       
     * 
     * @param body
     * @return
     *     returns com.avid.inewsqueue.types.HasNextResponseType
     * @throws HasNextFault
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "HasNext")
    @WebResult(name = "HasNextResponse", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
    public HasNextResponseType hasNext(
        @WebParam(name = "HasNext", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
        HasNextType body)
        throws ConnectionFault, HasNextFault
    ;

    /**
     * 
     *         This request is used to determine if the GetStories request with a PREVIOUS navigation direction request would 
     *         return stories that have not already been retrieved or not.  
     *         
     *         If a connection was not previously established, or the connection to the iNEWS server has been lost a 
     *         ConnectionFault will be returned.  If an error occurs during the request or the current queue 
     *         has not been set by calling SetCurrentQueue then a HasPreviousFault will be returned.
     *       
     * 
     * @param body
     * @return
     *     returns com.avid.inewsqueue.types.HasPreviousResponseType
     * @throws ConnectionFault
     * @throws HasPreviousFault
     */
    @WebMethod(operationName = "HasPrevious")
    @WebResult(name = "HasPreviousResponse", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
    public HasPreviousResponseType hasPrevious(
        @WebParam(name = "HasPrevious", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
        HasPreviousType body)
        throws ConnectionFault, HasPreviousFault
    ;

    /**
     * 
     *       This request creates a new story in the current queue.  Upon execution, the new story will be created in the 
     *       database and (optionally) will be set as the current story in an edit locked state.
     *       
     *       If a connection was not previously established, or the connection to the iNEWS server has been lost a 
     *       ConnectionFault will be returned.  If an error occurs during the story creation or the current queue has not been 
     *       set by calling SetCurrentQueue then a CreateStoryFault will be returned.
     *       
     * 
     * @param body
     * @return
     *     returns com.avid.inewsqueue.types.CreateStoryResponseType
     * @throws ConnectionFault
     * @throws CreateStoryFault
     */
    @WebMethod(operationName = "CreateStory")
    @WebResult(name = "CreateStoryResponse", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
    public CreateStoryResponseType createStory(
        @WebParam(name = "CreateStory", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
        CreateStoryType body)
        throws ConnectionFault, CreateStoryFault
    ;

    /**
     * 
     *         This request gets a story given a queue and a queue locator.
     * 
     *         If a connection was not previously established, or the connection to the iNEWS server has been lost a ConnectionFault will be returned.
     *         If an error occurs Getting the story, a GetStoryFault will be returned.
     *       
     * 
     * @param body
     * @return
     *     returns com.avid.inewsqueue.types.GetStoryResponseType
     * @throws GetStoryFault
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "GetStory")
    @WebResult(name = "GetStoryResponse", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
    public GetStoryResponseType getStory(
        @WebParam(name = "GetStory", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
        GetStoryType body)
        throws ConnectionFault, GetStoryFault
    ;

    /**
     * 
     *                                   This request gets the attributes of a queue or folder.
     * 
     *                                   If a connection was not previously established, or the connection to the iNEWS server has been lost a
     *                                   ConnectionFault will be returned.
     *                                   If an error occurs Getting the story, a GetAttributesFault will be returned.
     *                               
     * 
     * @param body
     * @return
     *     returns com.avid.inewsqueue.types.GetAttributesResponseType
     * @throws ConnectionFault
     * @throws GetAttributesFault
     */
    @WebMethod(operationName = "GetAttributes")
    @WebResult(name = "GetAttributesResponse", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
    public GetAttributesResponseType getAttributes(
        @WebParam(name = "GetAttributes", targetNamespace = "http://avid.com/inewsqueue/types", partName = "body")
        GetAttributesType body)
        throws ConnectionFault, GetAttributesFault
    ;

}
