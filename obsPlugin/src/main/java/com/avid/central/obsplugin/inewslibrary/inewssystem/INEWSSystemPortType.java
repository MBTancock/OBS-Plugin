
package com.avid.central.obsplugin.inewslibrary.inewssystem;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.CancelSearchResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.CancelSearchType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.ConnectResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.ConnectType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.DisconnectResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.DisconnectType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetChangedQueuesResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetChangedQueuesType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetFolderChildrenResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetFolderChildrenType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetMessageResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetMessageType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetQueuesFormResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetQueuesFormType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.HasNewMessageResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.HasNewMessageType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.IsConnectedResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.IsConnectedType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.PerformSimpleSearchResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.PerformSimpleSearchType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.RemoveWatchForQueueChangesResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.RemoveWatchForQueueChangesType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.RetrieveSearchResultsResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.RetrieveSearchResultsType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.SendMessageResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.SendMessageType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.WatchQueueForChangesResponseType;
import com.avid.central.obsplugin.inewslibrary.inewssystem.types.WatchQueueForChangesType;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "INEWSSystemPortType", targetNamespace = "http://avid.com/inewssystem")
@XmlSeeAlso({
    com.avid.central.obsplugin.inewslibrary.inewsstory.types.ObjectFactory.class,
    com.avid.central.obsplugin.inewslibrary.inewssystem.types.ObjectFactory.class
})
public interface INEWSSystemPortType {


    /**
     * 
     *         This request connects the HTTP session to an iNEWS system.  This request must be made prior to any other 
     *         requests against the iNEWS system.  The connection uses up one iNEWS API license which will not be released 
     *         until Disconnect is called or the HTTP session times out on the web server.  Calling Disconnect when operations 
     *         are complete is highly recommended.  If unable to connect to the provided server or if the user credentials are 
     *         invalid, a ConnectionFault will be returned and the message will contain details as to why the connection was 
     *         refused.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.ConnectResponseType
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "Connect")
    @WebResult(name = "ConnectResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public ConnectResponseType connect(
        @WebParam(name = "Connect", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        ConnectType body)
        throws ConnectionFault
    ;

    /**
     * 
     *         This request is used to terminate a previous connection with an iNEWS system.  This frees up the Web Client 
     *         license that was acquired upon connection.  Without calling the disconnect request, the iNEWS license will be 
     *         freed when then HTTP session times out on the Web Server.  Any operations performed while not connected will 
     *         return ConnectionFaults.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.DisconnectResponseType
     */
    @WebMethod(operationName = "Disconnect")
    @WebResult(name = "DisconnectResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public DisconnectResponseType disconnect(
        @WebParam(name = "Disconnect", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        DisconnectType body);

    /**
     * 
     *         Checks whether the session is currently connected to iNEWS.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.IsConnectedResponseType
     */
    @WebMethod(operationName = "IsConnected")
    @WebResult(name = "IsConnectedResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public IsConnectedResponseType isConnected(
        @WebParam(name = "IsConnected", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        IsConnectedType body);

    /**
     * 
     *         Given the full name of the folder in the iNEWS system, this request will return a list of all of that folder's 
     *         children.  All of the children will be directories (either queues or folders).  If the connection has not been 
     *         established or has been lost for some reason the request will return a ConnectionFault.  If the requested Folder
     *         does not exist or the name provided resolves to a Queue rather then a foler, it will return a 
     *         GetFolderChildrenFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetFolderChildrenResponseType
     * @throws ConnectionFault
     * @throws GetFolderChildrenFault
     */
    @WebMethod(operationName = "GetFolderChildren")
    @WebResult(name = "GetFolderChildrenResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetFolderChildrenResponseType getFolderChildren(
        @WebParam(name = "GetFolderChildren", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        GetFolderChildrenType body)
        throws ConnectionFault, GetFolderChildrenFault
    ;

    /**
     * 
     *         If there is a message pending for the account that is currently connected, this will return the next unreceived 
     *         message from the system.  If the connection has not been established or has been lost for some reason the 
     *         request will return a ConnectionFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetMessageResponseType
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "GetMessage")
    @WebResult(name = "GetMessageResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetMessageResponseType getMessage(
        @WebParam(name = "GetMessage", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        GetMessageType body)
        throws ConnectionFault
    ;

    /**
     * 
     *         If there is a message pending for the account that is currently connected, this will return true in its response.
     *         If the connection has not been established or has been lost for some reason the request will return a 
     *         ConnectionFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.HasNewMessageResponseType
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "HasNewMessage")
    @WebResult(name = "HasNewMessageResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public HasNewMessageResponseType hasNewMessage(
        @WebParam(name = "HasNewMessage", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        HasNewMessageType body)
        throws ConnectionFault
    ;

    /**
     * 
     *         Given the name of a recipient iNEWS user, send that user the given message.  If the connection has not been 
     *         established or has been lost for some reason the request will return a ConnectionFault.  If the user does not 
     *         exist or for some other reason the message cannot be delivered the request will return a SendMessageFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.SendMessageResponseType
     * @throws ConnectionFault
     * @throws SendMessageFault
     */
    @WebMethod(operationName = "SendMessage")
    @WebResult(name = "SendMessageResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public SendMessageResponseType sendMessage(
        @WebParam(name = "SendMessage", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        SendMessageType body)
        throws ConnectionFault, SendMessageFault
    ;

    /**
     * 
     *         Given the full name of a queue, get that queue's form (either story form or queue form as requested).  If the 
     *         connection has not been established or has been lost for some reason the request will return a ConnectionFault.  
     *         If the queue does not exist or the request will return a GetQueuesFormFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetQueuesFormResponseType
     * @throws ConnectionFault
     * @throws GetQueuesFormFault
     */
    @WebMethod(operationName = "GetQueuesForm")
    @WebResult(name = "GetQueuesFormResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetQueuesFormResponseType getQueuesForm(
        @WebParam(name = "GetQueuesForm", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        GetQueuesFormType body)
        throws ConnectionFault, GetQueuesFormFault
    ;

    /**
     * 
     *         Given the full name of a queue, indicates that you want to track that queue for changes.  Whether a queue has 
     *         changed or not after making this request can be determined by making the GetChangedQueues request.  
     *         If the connection has not been established or has been lost for some reason the request will return a 
     *         ConnectionFault.  If the queue does not exist or the name is not a queue the request will return a
     *         WatchQueueForChangesFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.WatchQueueForChangesResponseType
     * @throws ConnectionFault
     * @throws WatchQueueForChangesFault
     */
    @WebMethod(operationName = "WatchQueueForChanges")
    @WebResult(name = "WatchQueueForChangesResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public WatchQueueForChangesResponseType watchQueueForChanges(
        @WebParam(name = "WatchQueueForChanges", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        WatchQueueForChangesType body)
        throws ConnectionFault, WatchQueueForChangesFault
    ;

    /**
     * 
     *         This request is used retrieve all of the names of the queues that have changed since they were registered for 
     *         changes and have last changed since this request was last made.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.GetChangedQueuesResponseType
     */
    @WebMethod(operationName = "GetChangedQueues")
    @WebResult(name = "GetChangedQueuesResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public GetChangedQueuesResponseType getChangedQueues(
        @WebParam(name = "GetChangedQueues", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        GetChangedQueuesType body);

    /**
     * 
     *         Given the full name of a queue, indicates that you want stop tracking that queue for changes.    
     *         If the connection has not been established or has been lost for some reason the request will return a 
     *         ConnectionFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.RemoveWatchForQueueChangesResponseType
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "RemoveWatchForQueueChanges")
    @WebResult(name = "RemoveWatchForQueueChangesResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public RemoveWatchForQueueChangesResponseType removeWatchForQueueChanges(
        @WebParam(name = "RemoveWatchForQueueChanges", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        RemoveWatchForQueueChangesType body)
        throws ConnectionFault
    ;

    /**
     * 
     *         Register a simple search with the server.  The response will contain the ID of the search.  Search results will 
     *         be collected by the web service for later retrieval through GetSearchResultsByID. 
     *         If the connection has not been established or has been lost for some reason the request will return a 
     *         ConnectionFault.  If the criteria provided are invalid or the server produces an error the request will return a
     *         PerformSimpleSearchFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.PerformSimpleSearchResponseType
     * @throws PerformSimpleSearchFault
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "PerformSimpleSearch")
    @WebResult(name = "PerformSimpleSearchResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public PerformSimpleSearchResponseType performSimpleSearch(
        @WebParam(name = "PerformSimpleSearch", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        PerformSimpleSearchType body)
        throws ConnectionFault, PerformSimpleSearchFault
    ;

    /**
     * 
     *         Retrieve the results of a search that has been previously issued by providing the search ID. 
     *         If the connection has not been established or has been lost for some reason the request will return a 
     *         ConnectionFault.  If there is has been no search registered with the provided ID a RetrieveSearchResultsFault
     *         will be returned.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.RetrieveSearchResultsResponseType
     * @throws ConnectionFault
     * @throws RetrieveSearchResultsFault
     */
    @WebMethod(operationName = "RetrieveSearchResults")
    @WebResult(name = "RetrieveSearchResultsResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public RetrieveSearchResultsResponseType retrieveSearchResults(
        @WebParam(name = "RetrieveSearchResults", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        RetrieveSearchResultsType body)
        throws ConnectionFault, RetrieveSearchResultsFault
    ;

    /**
     * 
     *         Registers the service that implements the inewsnotification.wsdl and is responsible for retrieving notification
     *         callbacks from this service.
     *       
     * 
     * @param serviceURL
     * @throws RegisterNotificationServiceFault
     */
    @WebMethod(operationName = "RegisterNotificationService")
    @RequestWrapper(localName = "RegisterNotificationService", targetNamespace = "http://avid.com/inewssystem/types", className = "package com.avid.central.obsplugin.inewslibrary.inewssystem.types.RegisterNotificationServiceType")
    @ResponseWrapper(localName = "RegisterNotificationServiceResponse", targetNamespace = "http://avid.com/inewssystem/types", className = "package com.avid.central.obsplugin.inewslibrary.inewssystem.types.RegisterNotificationServiceResponseType")
    public void registerNotificationService(
        @WebParam(name = "ServiceURL", targetNamespace = "http://avid.com/inewssystem/types")
        String serviceURL)
        throws RegisterNotificationServiceFault
    ;

    /**
     * 
     *         Cancels a search that is currently in progress.  For non-indexed searches it is a good idea to cancel them if
     *         the results are no longer required as it will conserve server resources. 
     *         If the connection has not been established or has been lost for some reason the request will return a 
     *         ConnectionFault.
     *       
     * 
     * @param body
     * @return
     *     returns package com.avid.central.obsplugin.inewslibrary.inewssystem.types.CancelSearchResponseType
     * @throws ConnectionFault
     */
    @WebMethod(operationName = "CancelSearch")
    @WebResult(name = "CancelSearchResponse", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public CancelSearchResponseType cancelSearch(
        @WebParam(name = "CancelSearch", targetNamespace = "http://avid.com/inewssystem/types", partName = "body")
        CancelSearchType body)
        throws ConnectionFault
    ;

}
