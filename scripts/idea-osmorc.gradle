import java.nio.file.FileSystems

//bndInstructions

def findChild = { name, node ->
    for(def child : node.children()) {
        if(child.attribute('name') == name) {
            return child
        }
    }
    return null
}

def hasOsmoc = { node ->
    for (def child : node.children()) {
        if (child.attribute('type') == 'Osmorc') {
            return true
        }
    }
    return false
}

// Bnd will not accept '\' character as a path separator in .bnd file.
// This routine reconstructs a path using '/' as a separator.
// Should work for all operating systems.
def avoidBackwardSlashes = { path ->
    def absolutePath = FileSystems.default.getPath(path).toAbsolutePath()
    def root = absolutePath.root.toString().replaceAll(/(\\)/, '/')
    def rest = absolutePath.iterator().join('/')
    root + rest
}

subprojects {

    task generateBND() << {
        if(project.has('bndInstructions')) {

            def moduleOut = rootProject.file("out/production/${osgiInfo.bundleName}").absolutePath

            prepareBndInstructions()

            project.file("idea").mkdirs()
            project.file("idea/bnd.bnd").delete()
            project.file("idea/bnd.bnd").withWriter {
                it.println("# Auto generated by gradle. Only for idea usage. Do not modify")
                project.bndInstructions.each { key, value ->
                    it.println("$key: $value")
                }
                // Osmorc needs since intelliJ 13 a Include-Resource instruction
                // to add the generated felix annotations into the created bundle.
                //
                // Note: The current implementations assumes that the user hasn't changed the compile default output.
                it.println("# Warning: We expect that compiler output is set to default <projectRoot>/out.")
                def embeddedJars = files(project.configurations.embedded).collect{ "jar/$it.name=${it.toURI()}" }
                def includeResources = [avoidBackwardSlashes(moduleOut)] + embeddedJars
                it.println("-includeresource:\\\n ${includeResources.join(',\\\n')}")
            }
        }
    }

    ideaModule.dependsOn(generateBND)

    idea {
        module {
            iml {

                // Exclude infrastructure folders:
                excludeDirs += file('idea')

                withXml {

                    if(project.has('bndInstructions')) {
                        def parser = new XmlParser()
                        def node = it.asNode()
                        def fm = findChild('FacetManager', node);

                        if (!fm) {
                            fm = parser.parseText('<component name="FacetManager"></component>')
                            node.append(fm)
                        }

                        if (!hasOsmoc(fm)) {
                            def template = rootProject.file("scripts/resources/idea-osmorc.xml").text
                            template = template.replaceAll('JAR_PATH', avoidBackwardSlashes(rootProject.file("out/bundles/${osgiInfo.symbolicName}.jar").absolutePath))
                            template = template.replaceAll('SYMBOLIC_NAME', osgiInfo.symbolicName)
                            template = template.replaceAll('GROUP', group)
                            template = template.replaceAll('VERSION', version)
                            fm.append(parser.parseText(template))
                        }
                    }
                }

            }
        }
    }
}
